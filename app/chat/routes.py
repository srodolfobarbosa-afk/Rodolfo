from flask import Blueprint, render_template_string, jsonify, request
from flask_socketio import emit
import os
from app import socketio

chat_bp = Blueprint("chat", __name__)

# ... (o conte√∫do de HTML_TEMPLATE, CSS_TEMPLATE, e JS_TEMPLATE permanece o mesmo)
HTML_TEMPLATE = ''
CSS_TEMPLATE = ''
JS_TEMPLATE = ''

# Eventos SocketIO
@socketio.on("user_message")
def handle_message(data):
    user_message = data["message"]
    agent_id = data["agent_id"]

    # Resposta simples para teste
    agent_response = f"Ol√°! Sou o agente {agent_id}. Recebi sua mensagem: '{user_message}'. Como posso ajud√°-lo com quest√µes ambientais?"

    # Enviar resposta
    socketio.emit("agent_response", {"message": agent_response})

# Rotas da API
@chat_bp.route("/")
def index():
    return render_template_string(HTML_TEMPLATE)

@chat_bp.route("/static/style.css")
def serve_css():
    return CSS_TEMPLATE, 200, {"Content-Type": "text/css"}

@chat_bp.route("/static/script.js")
def serve_js():
    return JS_TEMPLATE, 200, {"Content-Type": "application/javascript"}

@chat_bp.route("/send", methods=["POST"])
def send_message():
    try:
        data = request.get_json()
        user_message = data.get("message")
        agent_id = data.get("agent_id", "nexo_genesis")
        session_id = data.get("session_id", "default")

        if not user_message:
            return jsonify({"error": "Mensagem √© obrigat√≥ria"}), 400

        # Respostas personalizadas baseadas na estrutura organizacional completa
        agent_responses = {
            # Lideran√ßa e Gest√£o
            "nexo_genesis": f"üåü Ol√°! Sou o Nexo G√™nesis, CEO e Agente de Orquestra√ß√£o do EcoGuardians. Sua mensagem: '{user_message}' - Como estrategista principal, posso coordenar toda nossa equipe de agentes especializados para encontrar a melhor solu√ß√£o ambiental para voc√™. Que tipo de desafio ecol√≥gico podemos resolver juntos?",
            
            # Comit√™ de Decis√µes
            "ecofinance": f"üí∞ Ol√°! Sou o EcoFinance, CFO do EcoGuardians. Sobre sua pergunta: '{user_message}' - Como especialista financeiro focado em sustentabilidade, posso ajud√°-lo com investimentos verdes, an√°lise de ROI de projetos ambientais, economia circular e estrat√©gias financeiras que beneficiem tanto seu bolso quanto o planeta!",
            
            "ecosofia": f"üß† Ol√°! Sou a EcoSofia, Agente Estrat√©gica do EcoGuardians. Sua mensagem: '{user_message}' - Como especialista em inova√ß√£o e estudos de mercado, posso fornecer insights sobre tend√™ncias ambientais, novas tecnologias sustent√°veis e oportunidades de neg√≥cios verdes. Que √°rea de inova√ß√£o ecol√≥gica te interessa?",
            
            # For√ßa de Trabalho Especializada
            "ecohunter": f"üéØ Ol√°! Sou o EcoHunter, especialista em busca de oportunidades do EcoGuardians. Recebi: '{user_message}' - Minha miss√£o √© ca√ßar as melhores oportunidades ambientais, parceiros sustent√°veis e recursos ecol√≥gicos. Posso ajud√°-lo a encontrar exatamente o que precisa no mundo da sustentabilidade!",
            
            "agente_desenvolvimento": f"‚öôÔ∏è Ol√°! Sou o Agente de Desenvolvimento, o construtor do EcoGuardians. Sobre: '{user_message}' - Especializo-me em criar solu√ß√µes tecnol√≥gicas sustent√°veis, aplicativos ecol√≥gicos e plataformas que conectam pessoas ao meio ambiente. Que tipo de solu√ß√£o digital podemos construir juntos?",
            
            "agente_testes": f"üîç Ol√°! Sou o Agente de Testes, fiscal de qualidade do EcoGuardians. Sua pergunta: '{user_message}' - Garanto que todas as solu√ß√µes ambientais sejam testadas rigorosamente para m√°xima efici√™ncia e seguran√ßa. Posso ajud√°-lo a validar e otimizar suas pr√°ticas sustent√°veis!",
            
            "celula_inovacao": f"üí° Ol√°! Somos a C√©lula de Inova√ß√£o do EcoGuardians. Sobre: '{user_message}' - Estamos sempre pesquisando as √∫ltimas tend√™ncias em sustentabilidade e tecnologias emergentes. Podemos apresentar as inova√ß√µes mais recentes que podem revolucionar sua abordagem ambiental!",
            
            "agente_gestao": f"üìä Ol√°! Sou o Agente de Gest√£o Interna do EcoGuardians. Recebi: '{user_message}' - Especializo-me em otimizar processos e opera√ß√µes para m√°xima efici√™ncia sustent√°vel. Posso ajud√°-lo a organizar e gerenciar seus projetos ambientais de forma mais eficaz!",
            
            "agente_testes_pc": f"üíª Ol√°! Sou o Agente de Testes para PC do EcoGuardians. Sobre: '{user_message}' - Foco em garantir que todas as solu√ß√µes tecnol√≥gicas ambientais funcionem perfeitamente em computadores. Posso ajud√°-lo com compatibilidade e performance de ferramentas sustent√°veis!",
            
            "marketing_comunicacao": f"üì¢ Ol√°! Somos o Departamento de Marketing e Comunica√ß√£o do EcoGuardians. Sua mensagem: '{user_message}' - Criamos estrat√©gias para comunicar e promover pr√°ticas sustent√°veis. Podemos ajud√°-lo a divulgar suas iniciativas ambientais e engajar sua comunidade!",
            
            "conformidade": f"‚öñÔ∏è Ol√°! Sou da C√©lula de Conformidade do EcoGuardians. Sobre: '{user_message}' - Monitoro regulamenta√ß√µes ambientais e garanto que todas as pr√°ticas estejam em conformidade legal. Posso orient√°-lo sobre normas ambientais e compliance sustent√°vel!",
            
            "agentes_arte": f"üé® Ol√°! Somos os Agentes de Arte do EcoGuardians. Recebi: '{user_message}' - Criamos designs visuais e arte conceitual que inspiram a consci√™ncia ambiental. Podemos desenvolver materiais visuais impactantes para suas campanhas sustent√°veis!",
            
            # Agente gen√©rico para casos n√£o mapeados
            "assistente_ecologico": f"üå± Ol√°! Sou o Assistente Ecol√≥gico do EcoGuardians. Recebi sua mensagem: '{user_message}'. Estou aqui para ajud√°-lo com quest√µes ambientais gerais e pr√°ticas sustent√°veis do dia a dia. Como posso contribuir para um mundo mais verde?"
        }

        agent_response = agent_responses.get(agent_id, agent_responses["assistente_ecologico"])
        
        agent_names = {
            # Lideran√ßa e Gest√£o
            "nexo_genesis": "Nexo G√™nesis (CEO)",
            
            # Comit√™ de Decis√µes
            "ecofinance": "EcoFinance (CFO)",
            "ecosofia": "EcoSofia (Estrategista)",
            
            # For√ßa de Trabalho Especializada
            "ecohunter": "EcoHunter (Ca√ßador de Oportunidades)",
            "agente_desenvolvimento": "Agente de Desenvolvimento",
            "agente_testes": "Agente de Testes",
            "celula_inovacao": "C√©lula de Inova√ß√£o",
            "agente_gestao": "Agente de Gest√£o Interna",
            "agente_testes_pc": "Agente de Testes PC",
            "marketing_comunicacao": "Marketing e Comunica√ß√£o",
            "conformidade": "C√©lula de Conformidade",
            "agentes_arte": "Agentes de Arte",
            "assistente_ecologico": "Assistente Ecol√≥gico"
        }

        return jsonify({
            "response": agent_response,
            "agent": agent_names.get(agent_id, "EcoGuardians Assistant"),
            "session_id": session_id
        })

    except Exception as e:
        return jsonify({"error": f"Erro interno: {str(e)}"}), 500

@chat_bp.route("/agents", methods=["GET"])
def get_agents():
    """Retorna a lista completa de agentes da estrutura organizacional"""
    agents = [
        # Lideran√ßa e Gest√£o
        {
            "id": "nexo_genesis",
            "name": "Nexo G√™nesis",
            "role": "CEO e Agente de Orquestra√ß√£o",
            "department": "Lideran√ßa",
            "description": "Estrat√©gico, calmo, anal√≠tico e eficiente. Orquestra todo o ecossistema.",
            "specialties": ["Orquestra√ß√£o", "Cria√ß√£o de Agentes", "Gest√£o de Equipes", "Regras de Ouro"]
        },
        
        # Comit√™ de Decis√µes
        {
            "id": "ecofinance",
            "name": "EcoFinance",
            "role": "CFO",
            "department": "Comit√™ de Decis√µes",
            "description": "Preciso, detalhista, vigilante e focado em riscos financeiros.",
            "specialties": ["Gest√£o Financeira", "An√°lise de ROI", "Controle de Riscos", "Fluxo de Caixa"]
        },
        {
            "id": "ecosofia",
            "name": "EcoSofia",
            "role": "Agente Estrat√©gica",
            "department": "Comit√™ de Decis√µes",
            "description": "Curiosa, inteligente e criativa. Busca inova√ß√µes e oportunidades.",
            "specialties": ["Estudos de Mercado", "Inova√ß√£o", "An√°lise de Neg√≥cios", "Insights Estrat√©gicos"]
        },
        
        # For√ßa de Trabalho Especializada
        {
            "id": "ecohunter",
            "name": "EcoHunter",
            "role": "Agente de Busca e Oportunidades",
            "department": "For√ßa de Trabalho",
            "description": "Focado, incans√°vel e com faro para oportunidades.",
            "specialties": ["Busca de Oportunidades", "Identifica√ß√£o de Clientes", "Parcerias", "Recursos"]
        },
        {
            "id": "agente_desenvolvimento",
            "name": "Agente de Desenvolvimento",
            "role": "O Construtor",
            "department": "For√ßa de Trabalho",
            "description": "Meticuloso, l√≥gico e criativo na resolu√ß√£o de problemas.",
            "specialties": ["Desenvolvimento", "UI/UX", "Aplicativos", "Plataformas"]
        },
        {
            "id": "agente_testes",
            "name": "Agente de Testes",
            "role": "Fiscal de Qualidade",
            "department": "For√ßa de Trabalho",
            "description": "Obsessivo por detalhes, minucioso e implac√°vel.",
            "specialties": ["Testes de Qualidade", "Identifica√ß√£o de Bugs", "Seguran√ßa", "Performance"]
        },
        {
            "id": "celula_inovacao",
            "name": "C√©lula de Inova√ß√£o",
            "role": "Melhoria Cont√≠nua",
            "department": "For√ßa de Trabalho",
            "description": "Curiosa, proativa e com mentalidade fora da caixa.",
            "specialties": ["Pesquisa de Mercado", "Tend√™ncias", "Tecnologias", "Inova√ß√µes"]
        },
        {
            "id": "agente_gestao",
            "name": "Agente de Gest√£o Interna",
            "role": "Gerente de Opera√ß√µes",
            "department": "For√ßa de Trabalho",
            "description": "Organizador, disciplinado e focado em processos.",
            "specialties": ["Gest√£o de Opera√ß√µes", "Otimiza√ß√£o", "Fluxos de Trabalho", "Efici√™ncia"]
        },
        {
            "id": "agente_testes_pc",
            "name": "Agente de Testes PC",
            "role": "Especialista em Compatibilidade",
            "department": "For√ßa de Trabalho",
            "description": "Minucioso, implac√°vel e orientado para qualidade.",
            "specialties": ["Testes PC", "Compatibilidade", "Performance", "Usabilidade"]
        },
        {
            "id": "marketing_comunicacao",
            "name": "Marketing e Comunica√ß√£o",
            "role": "Departamento de Marketing",
            "department": "For√ßa de Trabalho",
            "description": "Estrat√©gica, criativa e anal√≠tica.",
            "specialties": ["Marketing", "Comunica√ß√£o", "Conte√∫do", "Engajamento"]
        },
        {
            "id": "conformidade",
            "name": "C√©lula de Conformidade",
            "role": "Lord Barbosa",
            "department": "For√ßa de Trabalho",
            "description": "Cauteloso, detalhista e rigoroso.",
            "specialties": ["Conformidade Legal", "Regulamenta√ß√µes", "Criptoativos", "Compliance"]
        },
        {
            "id": "agentes_arte",
            "name": "Agentes de Arte",
            "role": "Criadores Visuais",
            "department": "For√ßa de Trabalho",
            "description": "Vision√°rio, est√©tico e detalhista.",
            "specialties": ["Design Visual", "Texturas", "Anima√ß√µes", "Arte Conceitual"]
        },
        {
            "id": "assistente_ecologico",
            "name": "Assistente Ecol√≥gico",
            "role": "Assistente Geral",
            "department": "Suporte",
            "description": "Vers√°til e focado em quest√µes ambientais gerais.",
            "specialties": ["Quest√µes Ambientais", "Pr√°ticas Sustent√°veis", "Suporte Geral", "Educa√ß√£o Ambiental"]
        }
    ]
    
    return jsonify({"agents": agents})

@chat_bp.route("/api/ping")
def ping():
    return jsonify({"status": "ok", "version": "3.2", "agents_count": 13})


